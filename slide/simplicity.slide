Frameworks, Frameworks, Frameworks  
Go based web framework from the front end to the back  
18:30 23 Jul 2015
Tags: go, web, framework

Antonio Sun  
System Programmer  
https://goo.gl/q0fQmk  
https://github.com/suntong001/simplicity
http://go-talks.appspot.com/github.com/suntong001/simplicity/slide/simplicity.slide

* Frameworks, Frameworks, Frameworks

.image framework-construction.jpg

Tight schedule (20 slides in 20 minutes), so please leave your questions to the end

# Most of the contents covered you've probably already known => go through very quickly without touching any details. It is now..., I shall be able to finish before (+15min).

* Go Based MEAN Stack Alternative

When talking about choosing the right frameworks, the first question comes to the mind should be: "is the grass greener on the other side of the fence"

- [[https://goo.gl/80Hg8C][Node.js vs Golang: Battle of the Next-Gen Languages]]
- [[https://goo.gl/kAUdNY][Farewell Node.js]]
- [[https://goo.gl/DQhfqJ][The MEAN stack is doomed]]

* The Problem

- The Go default Http Server, although powerful, but still too simple

    http.ListenAndServe(":8123", nil)

- The Martini framework is way too heavy

* Goal

Looking for a *minimum* set that

- contains least amount of packages to install and *learn*
- yet sufficient enough that covers most features
- basically 20% of the code doing 80% of the tasks
- still, provides a solid base that aligns well for expansion

#But
#
#- such choice will always be biased, and 
#- will always be influenced by how wide/narrow the picker's knowledge is
#- especially when he knows nothing about Go based frameworks and
#- nothing about front end frameworks neither!

So anticipate to get _less_

* Go Based Frameworks

- [[https://github.com/robfig/revel][revel]]
- [[https://github.com/astaxie/beego][beego]]
- [[https://github.com/codegangsta/martini][martini]]
- [[https://github.com/zenazn/goji][goji]]
- Many others like Gin, gocraft/web, and other components like Gorilla, mgo, etc

Project Objective: Content Delivery   
mostly statics with only little user interaction

# one line blurb about each. To build a CGI-alike system

* Content Delivery System with Goji

Goji

- minimalistic microframework
- philosophy: first, simplicity; and second, composability

A [[https://github.com/suntong001/simplicity][simple sample code]] that shows

- how to set up routes
- how to add custom middlewares
- no sessions handling via Gorilla
- demo works without any dependency on any databases
- serves homepage and static content from root
- user interaction via special urls 
- and password protected back-ends handling as well

# Show a bit how it is done.

* Goji

- set up routes

	// Add routes to the global handler
	goji.Get("/greets", Root)
	goji.Post("/greet", NewGreet)

- add custom middlewares

	// ... middleware allows you to cut down on the repetition by
	// eliminating the shared, already-matched prefix.
	admin.Use(middleware.SubRouter)
	admin.Use(SuperSecure)

- serves homepage and static content from root

	goji.Handle("/*", http.FileServer(http.Dir(cf.Webapp.Path)))

# Lesson learned? simple, easy starting, but next time...

* New hat in the ring

Next time, check out

Echo
http://echo.labstack.com/
A fast and unfancy micro web framework for Golang.

.image Echo_micro_web_framework.png

# The performance graph concludes nicely of the go-based frameworks, move on to something not covered by the framework, into more coding details

* Next, a good Go configuration system

- Is TOML and/or Viper the only options?
- Find out them all at [[https://sfxpt.wordpress.com/2015/06/16/providing-options-for-go-applications/][Providing Options for Go Applications]]

It's better to have a configuration system that,

- Define default values within the program so that you don't need to define them again in TOML file
- Override values defined in the program from TOML config file
- Override values defined in config file from env var or command line


* multiconfig

how to use [[https://github.com/koding/multiconfig][multiconfig]]:

    func main() {
      m := multiconfig.NewWithPath("config.toml") // supports TOML and JSON

      // Get an empty struct for your configuration
      serverConf := new(Server)

      // Populated the serverConf struct
      m.MustLoad(serverConf) // Check for error

      fmt.Println("After Loading: ")
      fmt.Printf("%+vn", serverConf)
     
      if serverConf.Enabled {
         ...
      }
    }

That's pretty much everything you need to do, besides [[https://sfxpt.wordpress.com/2015/06/19/beyond-toml-the-gos-de-facto-config-file/][providing the TOML file and mapping it into Go]].

* Viper

how to use [[https://github.com/spf13/viper][viper]] and [[https://github.com/spf13/cobra][cobra]] together to handle options:

    flags := mainCmd.Flags()

    flags.Bool("debug", false, "Turn on debugging.")
    flags.String("addr", "localhost:5002", "Address of the service")
    flags.String("smtp-addr", "localhost:25", "Address of the SMTP server")
    flags.String("smtp-user", "", "User to authenticate with the SMTP server")
    flags.String("smtp-password", "", "Password to authenticate with the SMTP server")
    flags.String("email-from", "noreply@example.com", "The from email address.")

    viper.BindPFlag("debug", flags.Lookup("debug"))
    viper.BindPFlag("addr", flags.Lookup("addr"))
    viper.BindPFlag("smtp_addr", flags.Lookup("smtp-addr"))
    viper.BindPFlag("smtp_user", flags.Lookup("smtp-user"))
    viper.BindPFlag("smtp_password", flags.Lookup("smtp-password"))
    viper.BindPFlag("email_from", flags.Lookup("email-from"))

You need that extra `BindPFlag` step for viper and cobra to work together.


* Front End Frameworks That Work Well with Go

# Switching the focus from back-ends to the front-end, which one work well with Go?

- AngularJs + Go?
- Bootstrap from Twitter?
- [[http://facebook.github.io/react/][ReactJS]] from Facebook?
- or [[https://www.google.com/design/spec/material-design/introduction.html][Material Design]] from Google?

# Everything possible, even AngularJs + Go have multiple implementations. What to choose?

Consideration

- which front end framework gives the best leverage to the Go back-end?
- Declarative or Imperative UI?

* Initializr

# Easiest to start with

[[http://www.initializr.com/][HTML5 templates generator]] from,

- [[https://github.com/h5bp/html5-boilerplate/blob/v4.3.0/doc/TOC.md][Classic HTML5 Boilerplates]]
- [[http://verekia.com/initializr/responsive-template][Responsive]]
- [[http://getbootstrap.com/getting-started/][Bootstrap]]

# but still imperative, need Declarative UI

* Declarative UI - Semantic UI

# Clean and clear, Declarative vs. Imperative => Latex vs. Word, what vs. how, underline & italic

.image semantic-ui.png

- [[http://semantic-ui.com/][Semantic UI]], a development framework that helps create beautiful, responsive layouts using human-friendly HTML
- 3000+ Theming Variables, 50+ UI Components
- Responsively designed, integrates with React, Angular, Meteor, Ember, etc.

# Setup a standard, good or bad?

* Google's Material Design

# Google's way

.image http://superdevresources.com/wp-content/uploads/sites/7/2014/06/material-design-google-design-language.png

(courtesy of http://superdevresources.com/material-design-web-ui-frameworks/)

* Google's Material Design, Insight

.image https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0Bx4BSt6jniD7UXpQYWltVjNPWXc/whatismaterial_environment_3d.png 200 _

Combined shadow from key and ambient lights

.image https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B6Okdz75tqQsNnVmbTNMUF9DR0U/whatismaterial_environment_shadow3.png  200 _

# Still imperative, no problem, people still rushing over to the Material Design camp to do the implementation. Guess how many?

* 7 Material Design Web UI Frameworks

[[http://superdevresources.com/material-design-web-ui-frameworks/][Material Design Frameworks for the Web]]

1. Materialize
2. Material UI
3. Paper Bootswatch for Bootstrap
4. Bootstrap Material
5. Leaf BETA
6. MUI CSS Framework
7. Polymer Project

# The most beautiful and comprehensive one is,

* Material Design UI - Material UI

# How beautiful and elegant it is

[[http://callemall.github.io/][MaterialUI]] -- [[http://facebook.github.io/react/][React]] + [[https://www.google.com/design/spec/material-design/introduction.html][Google's Material Design]]. 

.image MaterialUI.png 

# Can't get it working because of ReactJS, but by all means to use it if you can. My choice

* Material Design UI - Bootstrap Material

.image http://superdevresources.com/wp-content/uploads/sites/7/2014/11/bootstrap-material-design.png

(courtesy of http://superdevresources.com/material-design-web-ui-frameworks/)
https://github.com/FezVrasta/bootstrap-material-design
http://fezvrasta.github.io/bootstrap-material-design/bootstrap-elements.html

# When I first chose it about 3 months ago, It was still an one-man shown. Now 62 Contributors, 12k stars.
